if多分支判断语句：
	语法
	    if 真值表达式1:
	        语句块1...
	    elif 真值表达式2:
	        语句块2...
	    elif 真值表达式3:
	        语句块3...
	    ...
	    else:
	        语句块4
	语法说明：
	 - elif 子句可以有0个，1个或多个
	 - else 子句可以有0个或1个,且只能放在此if语句的最后
	 - 真值判断会自上而下进行，如果所有表达式都为False,则执行else子句中的语句块
	 - 当真值判断为True时，则执行此条件下内部的语句，
	 然后结束此if语句的执行,转去执行此语句的后一条语句
	示例：
		输入一个数字，用程序来判断这个数是正数，负数还是零
if语句嵌套
    if语句本身是由多条子句组成的一条复合语句，
    if语句可以作为语句嵌套到另一个复合语句的内部
if语句的真值表达式：
	if 100:
		print('真值')
	if bool(100):
		print('真值')
条件表达式
    语法
        表达式1 if 真值表达式 else 表达式2
    作用
        根据真值表达式的取值(True/Flase)来决定执行表达式1或表达式2并返回结果
        如果真值表达式的布尔环境值为True时，
        执行表达式1并返回结果对象的引用，
        否则执行表达式2并返回对象的引用
pass 语句充语法空白
    pass又名空语句
帮助函数help:
     help(float)
     help(函数名)
     help(类型名)
布尔运算
    布尔运算运算符
        not and or
    布尔非操作 not
	    not 布尔非操作语法
	       not x
	    not 布尔非操作作用：
	       对 x 进行布尔取非：
	           如bool(x) 为True,则返回False, 否则为True
	    not 布尔非操作示例:
	       not True  # 返回False
	       not False # 返回True
    布尔与操作 and 
      布尔与操作语法:
         x and y
     注: 
       x,y代表表达式
    布尔与操作作用：
        优先返回假值对象
        当x的布尔值为False时，返回x,否则返回y
    布尔或操作 or
      布尔或操作语法:
        x or y
    布尔或操作作用：
     优先返回真值对象
     当x为True时，返回x,否则返回y
    布尔或操作示例：
    >>> True or True
       True
    >>> False or True
       True
    >>> True or False
       True
    >>> False or False
        False
    思考：
    	score = input('请输入成绩：') or '0'
    	score = int(score)
    	if score < 0 or score > 100:
    		print('您输入的成绩不合法')
    	else:
    		print('您的成绩是：',score) 
正负号运算符：
	语法：
		+ 正号
		- 负号
字符串 str
   字符串的作用
      是用来记录文本信息
   字符串的的表示方法
      在非注释中凡是用引号括起来的部分都是字符串
      ' 单引号
      " 双引号
      ''' 三单引号
      """ 三双引号
   空字符串的字面值表示方法:
	  ''
	  ""
	  ''' '''
	  """ """
   空字符的的布尔测式值(bool)为False.
   非空字符中表示方法:
	  'hello'
	  "hello"
	  '''hello'''
	  """hello"""
   单引和双引号的区别:
      单引号内的双引号不算结束符
      双引号内的单引号不算结束符
   三引号的字符串
        以"""或'''开头，以"""或'''结尾的这符串
   三引号字符串的作用
       三引号字符串中的换行会自动转换为换行符\n
       三引号内可以包含单引号和双引号
    三引号字符串示例
     三引号字符串，也叫所见即所得字符串
用转义序列代表特殊字符
    字符串字面值中用字符反斜杠\ 后跟一些字符代表特殊的一个字符
    \'  单引号(')
	\"  双引号(")
    \\  反斜杠(\ )
    \n  换行
    \r  返回光标至行首
    \f  换页
    \t  水平制表符
    \v  重直制表符
    \b  倒退
    \a  响铃(无效)
    \0  空字符，字符值为零
    \ooo  ooo为三位八进制表示的字符
    \xXX  XX为两位十六进制表示的字符
    \uXXXX  Unicode 16的十六进制表示的字符
    \UXXXXXXXX  Unicode 32的十六进制表示的字符
ASCII 编码：
    man ascii
    常用的ASCII编码：
        字符       十进制         十六进制
        '0'         48           0x30
        'A'         65           0x41
        'a'         97           0x61
raw字符串(原始字符串)
    格式:
     r"字符串内容"
     r'字符串内容'
     r"""字符串内容"""
     r'''字符串内容'''
    raw字符串作用
      让转义符号 \ 无效
字符串的运算
     1.+加号运算符用于拼接字符串
     2.+= 运算符用原字符串与右侧字符串拼接生成新的字符串
     3.* 运算符生成重复字符串
      注： 字符串只能和整数相乘
     4.*= 生成重复字符串并让原变量绑定生成后的字符串
字符串的比较运算(字符串比较)：
    运算符：
        > >= < <= == !=
    规则：
      主要比较其编码值
in & not in 成员运算符
    作用：
       in 用于序列，字典，集合中，用于判断某个值是否存在于容器中,
          如果存在返回True,否则返回False
       not in 与in 运算符返回结果相反。
    格式：
       对象 in 序列
字符串的基本操作
    索引 index
        python 字符串是不可以改变的字符序列
    索引语法：
        字符串[整数表达式]
    索引语法说明：
        python 序列都可以用索引(index)来访问序列中的对象
        python 序列正向的索引是从0开始的，第二个索引为1，最后一个为len(s)-1
        python 序列的反向索引是从-1开始的,-1代表最后一个,-2代表倒数第二个,以此类推。第一个是-len(s)
    切片 slice
        slice作用
             从字符串序列中取出相应的元素重新组成一个字符串序列
        语法:
             s[(开始索引b):(结束索引e)(:(步长s))]
             注：小括号()括起的部分代表可省略
        语法说明
             开始索引是切片开始切下的位置,0代表第一个元素，1代表第一个元素，-1代表最后一个元素...
             结束索引是切片的终止索引(但不包含终止点)
             步长是切片每次获取完当前元素后移动的方向和偏移量
          没有步长，相当于步长为1(默认为1)
          当步长为正整数时，取正向切片:
          开始索引默认为0,结束索引是最后一个元素的下一个位置
          当步长为负整数时,取反向切片:
          反向切片时。默认的起始位置为最后一个元素，终止位置是第一个元素的前一个位置
Python3中常用的序列函数
    len(seq)  返回序列的长度
    max(x)  返回序列的最大值的元素
    min(x)  返回序列的最小值的元素
字符编码转换函数
    ord(c)  返回一个字符c的Unicode编码值
    chr(i)  返回i这个值所对应的 字符
整数转换为字符串函数
    bin(i)  将整数转换为二进制字符串
    oct(i)  将整数转换为八进制字符串
    hex(i)  将整数转换为十六进制字符串
字符串构造函数
	str(obj='')
	将对象转换为字符串
    "123" + 1  # 不合法 ...
Python3 中常用字符串方法(method)
    字符串的方法调用语法:
         对象.方法名(方法传参)
    字符串的属性用法示例:
       "abc".isalpha()  # 语法是对的
       123.isalpha()    # 语法是错的
    字符串的方法：
		S.isdigit()                             
		     判断字符串中的字符是否全为数字
		S.isalpha()                             
		     判断字符串是否全为英文字母
		S.islower()                              
		     判断字符串所有字符是否全为小写英文字母
		S.isupper()
		     判断字符串所有字符是否全为大写英文字母
		S.isspace()                             
		     判断字符串是否全为空白字符
		S.center(width[,fill])                  
		     将原字符串居中，左右默认填充空格
		S.count(sub[, start[,end]])             
		     获取一个字符串中子串的个数
		S.find(sub[, start[,end]])              
		     获取字符串中子串sub的索引,失败返回-1
		S.strip([chars])                        
		     返回去掉左右char字符的字符串(默认char为空白字符)
		S.lstrip([chars])                       
		     返回去掉左侧char字符的字符串(默认char为空白字符)
		S.rstrip([chars])                       
		     返回去掉右侧char字符的字符串(默认char为空白字符)
		S.upper()                               
		     生成将英文转换为大写的字符串
		S.lower()                               
		     生成将英文转换为小写的字符串
		S.replace(old, new[, count])                
		     将原字符串的old用new代替，生成一个新的字符串
		S.startswith(prefix[, start[, end]])             
		    返回 S是否是以prefix开头，如果以prefix开头返回True,否则返回False, 
		S.endswith(suffix[, start[, end]])             
		    返回S是否是以suffix结尾，如果以suffix结尾返回True,否则返回False         
		S.title()                              
		    生成每个英文单词的首字母大写字符串
		S.isnumeric()                          
		    判断字符串是否全为数字字符
	空白字符
		是指空格,水平制表符(\t),换行符(\n)等不可见的字符...
字符串格式化表达式
    作用：
         生成一定格式的字符串
    运算符
        %
    语法格式
       格式字符串 % 参数值
       格式字符串 % (参数值1, 参数值2, ...)
       % 左侧为格式化字符串
       % 右侧为参数值，当有多个参数值时用括号()括起来并用逗号(,)分割
       格式化转换字符串中以%开头的为占位符，占位符的位置将用参数值替换
    占位符：
	    %s          字符串, 使用 str(x) 函数转换
		%r          字符串，使用 repr(x) 函数转换
		%c          整数转为单个字符，将其转换为Unicode编码的所对应的字符。chr()
		%d          十进制整数
		%o          八进制整数
		%x          十六进制整数(字符a-f小写)
		%X          十六进制整数(字符A-F大写)
		%e          指数型浮点数(e小写),如2.9e+10
		%E          指数型浮点数(E大写),如2.9E+10
		%f, %F      浮点十进制形式，默认小数点后为6位
		%g, %G      十进制形式浮点或指数浮点自动转换
		%%          等同于一个%字符
	占位符 % 和类型码之间的格式语法
        %[- + 0 宽度.精度]类型码
       -   : 左对齐(默认是右对齐)
       +   : 显示正号
       0   : 左侧空白位置补零
      宽度 : 整个数据输出的宽度
      精度 : 保留小数点后多少位(默认6位)...
循环语句
    while 语句
    for 语句
   问题:
       输入一个整数n,写程序打印如下:
          这是第 1 行
          这是第 2 行
             ....
          这是第 n 行
        如何让一条语句重复的执行多次？
        如果i是一个变量,就可以这样写
        print("这是第", i, "行")

    while语句
      while语句的作用
           根据一定条件，重复的执行一条语句或多条语句
    while语句语法
       while 真值表达式:
           语句块1（*此部分的语句可能会重复执行)
       else:
           语句块2
    while语法说明：
       1. 先执行真值表达式，测试布尔值是否为True或False
       2. 如果真值表达式测试值为True 则执行语句1,然后再返回到第1步,重复进行测试
       3. 如果真值表达式测试值为False，则执行else子语句中的语句2,然后结束此while语句,如果没有else子句则直接结束此while语句的执行
       else 子句部分可以省略(同if语句类似)
    while语法要求(同if类似)
       while语句内部的语句要以空格，制表符的形式进行缩进来表示包含关系。
       缩进通常以4个空格作为缩进的标准
       相同缩进格式的语句代表相同的所属级别
    while 语句注意事项
 	   要控制循环真值表达式的值来防止死循环
       通常用真值表达式内的循环变量来控制循环条件
       通常在循环的语句块内改变循环变量来控制循环次数和变量的走向

while语句嵌套
   while 语句本身是语句，和其它语句一样，可以嵌套到任何的复合语句中
   while语句嵌套示意
     while 真值表达式:
        ...
        while 真值表达式2:
            ....
        else:
            ...
         ...
     else:
         ...
break语句
    问题:
        如果在循环过程中我不想再继续此循环语句的执行了，怎么办？
    break语句的作用：
        用于循环语句（while, for语句）中，用来终止当前循环语句的执行。
    break语句的说明：
        当break语句执行后，此循环语句break之后的语句将不再执行
        break 语句通常和if语句组合使用
        break 语句终止循环时，循环语句的else子句的语句将不会被执行
        break 语句只能终止当前循环语句的执行，如果有循环嵌套时，不会跳出嵌套的外重循环
        break语句只能在循环语句(while 或 for 语句)内部使用
    死循环
        死循环是指循环条件一直成立的循环
        死循环通常用break语句来终止循环
        死循环的else子句永远不会执行
